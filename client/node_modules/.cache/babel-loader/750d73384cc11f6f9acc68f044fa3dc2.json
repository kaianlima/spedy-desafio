{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Kaian Lima\\\\ReactApps\\\\spedy-desafio\\\\src\\\\components\\\\header\\\\header.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport DrawerButton from \"../drawer-button/drawer-button\";\nimport DrawerList from \"../drawer-list/drawer-list\";\nimport { toggleDrawer } from \"../../redux/drawer/drawer.actions\";\nimport { selectDrawerOpen } from \"../../redux/drawer/drawer.selectors\";\nconst drawerWidth = 240;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexGrow: 1\n  },\n  title: {\n    flexGrow: 1\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  }\n}));\n\nconst Header = ({\n  toggleDrawer,\n  drawerOpen\n}) => {\n  _s();\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"fixed\",\n      className: clsx(classes.appBar, {\n        [classes.appBarShift]: drawerOpen\n      }),\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        children: [/*#__PURE__*/_jsxDEV(DrawerButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          noWrap: true,\n          children: \"Persistent drawer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DrawerList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Header, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = Header;\nconst mapStateToProps = createStructuredSelector({\n  drawerOpen: selectDrawerOpen\n});\n\nconst mapDispatchToProps = dispatch => ({\n  toggleDrawer: () => dispatch(toggleDrawer())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["C:/Users/Kaian Lima/ReactApps/spedy-desafio/src/components/header/header.jsx"],"names":["React","connect","createStructuredSelector","clsx","makeStyles","AppBar","Toolbar","Typography","CssBaseline","DrawerButton","DrawerList","toggleDrawer","selectDrawerOpen","drawerWidth","useStyles","theme","root","display","flexGrow","title","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","Header","drawerOpen","classes","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\n\r\nimport DrawerButton from \"../drawer-button/drawer-button\";\r\nimport DrawerList from \"../drawer-list/drawer-list\";\r\n\r\nimport { toggleDrawer } from \"../../redux/drawer/drawer.actions\";\r\nimport { selectDrawerOpen } from \"../../redux/drawer/drawer.selectors\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n}));\r\n\r\nconst Header = ({ toggleDrawer, drawerOpen }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: drawerOpen,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <DrawerButton />\r\n          <Typography variant=\"h6\" noWrap>\r\n            Persistent drawer\r\n          </Typography>\r\n          <DrawerList />\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  drawerOpen: selectDrawerOpen,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  toggleDrawer: () => dispatch(toggleDrawer()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n"]},"metadata":{},"sourceType":"module"}